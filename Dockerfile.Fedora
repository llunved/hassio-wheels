ARG BUILD_FROM
FROM ${BUILD_FROM}

ARG BUILD_ARCH
ENV ARCH=${BUILD_ARCH}

# Install requirements
RUN dnf install -y \
        rsync \
        openssh-clients \
        python3-pip \
        python3-click \
	python3-Cython \
	python3-requests \
	pipenv \ 
	which \
	git \	
    && yum clean all -y

RUN cd /usr/local/src && git clone https://github.com/thoth-station/thamos.git \
    && pip3 -v install --no-cache-dir /usr/local/src/thamos \
    && rm -rf /usr/local/src/thamos/usr/local/src/thamos

COPY thamos_config_template.yaml /usr/local/src/
COPY requirements.txt /usr/local/src/

RUN ls -la /usr/local/src

# Prep for Thoth - must be pipenv for now.
RUN cd /usr/local/src/ \
    && sed -ie 's/^\([0-9a-zA-Z.-]\+\)\=\=.*/\1/' requirements.txt \
    #&& sed -ie 's/^\(.*\)/\L\1/' requirements.txt \
    && pipenv lock -r \
    && rm -fv /usr/local/src/*.lock \
    && rm -fv /usr/local/src/requirements.txt 

# Generat Thoth config
RUN cd /usr/local/src \
    && thamos -v -d /usr/local/src/ config --template /usr/local/src/thamos_config_template.yaml -I \
    && cat /usr/local/src/.thoth.yaml

RUN ls -la /usr/local/src

# Run the Thamos adviser
RUN cd /usr/local/src \
    && thamos -v -d /usr/local/src/ advise 
#|| echo "Hmm. Ignoring Thamos failure, going with existing stack"

RUN cd /usr/local/src/ \
    && pipenv install --deploy --keep-outdated

# Install builder
COPY . /usr/local/src/builder/
#RUN cd /usr/local/src \
#    && pipenv install /usr/local/src/builder \
#    && pipenv run pip3 -v install --no-cache-dir /usr/local/src/builder \
#    && pipenv run pip3 -v wheel /usr/local/src/builder 
#    && pip3 -v install --no-cache-dir /usr/local/src/builder \
#    && rm -fr /usr/local/src/builder

#WORKDIR /data
WORKDIR /usr/local/src
#ENTRYPOINT [ "python3", "-m", "builder" ]
ENTRYPOINT [ "pipenv", "run", "/usr/local/src/builder" ]

